@rendermode InteractiveServer
@page "/"
@using FileUpload.Services;
@inject IFileUpload fileUpload;

<div class="col-6">
    <h1>File Upload in Blazor</h1>
    <div class="form-group">
        <InputFile OnChange="OnInputFileChange" multiple />
        <button class="btn btn-sm btn-success" type="button"
            @onclick="UploadFiles">Upload</button>
        <br /><br />
        @{
            var progressCss = "progress" + (displayProgress ? "" : "d-none");
            var progressWidthStyle = progressPercent + "%";
        }
        <div class="@progressCss">
            <div class="progress-bar" role="progressbar" 
                style="width:@progressWidthStyle" 
                area-valuenow="@progressPercent"
                area-minvalue="0" area-maxvalue="100">

            </div>
        </div>
    </div>
    <br/>
    <label>@labelText</label>
    <br/>
</div>

@code{
    IReadOnlyList<IBrowserFile> selectedFiles;
    private string labelText = "";
    private bool displayProgress;
    private int progressPercent;

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = new List<IBrowserFile>();
        selectedFiles = e.GetMultipleFiles();
    }

    private async Task UploadFiles()
    {
        try
        {
            if (selectedFiles != null && selectedFiles.Count > 0)
            {
                var uploaded = 0;
                displayProgress = true;

                foreach (var file in selectedFiles)
                {
                    await fileUpload.UploadFile(file);
                    uploaded++;
                    progressPercent = (int)((uploaded / selectedFiles.Count)*100);
                }

                // displayProgress = false;
                labelText = $"Upload of {selectedFiles.Count} files successfull.";
            }
        }
        catch (Exception ex)
        {
            labelText = $"Upload failed due to {ex.Message}";
        }
    }
}
